import React from 'react';

function Osi() {
  return (
    <div className="TCP">
      <h1>11.TCP protokols</h1>
      <p dir="ltr" style={{lineHeight: '1.2', textAlign: 'justify', marginTop: '0pt', marginBottom: '0pt'}}><span style={{fontSize: '12pt', fontFamily: 'Calibri,sans-serif', color: '#000000', backgroundColor: 'transparent', fontWeight: 400, fontStyle: 'normal', fontVariant: 'normal', textDecoration: 'none', verticalAlign: 'baseline', whiteSpace: 'pre-wrap'}}>TCP (angļu: Transmission Control Protocol; Pārraides vadības protokols) ir viens no galvenajiem interneta protokoliem. TCP ļauj tīkla datoru programmām izveidot savienojumus no vienas uz otru, caur kurām var pārsūtīt datus. Atšķirībā no UDP, šis protokols garantē drošu un secīgu datu pārraidi. TCP arī atšķir dažādu programmu savienojuma datus (lietojot portu numurus).&nbsp;</span></p>
        <p dir="ltr" style={{lineHeight: '1.2', textAlign: 'justify', marginTop: '0pt', marginBottom: '0pt'}}><span style={{fontSize: '12pt', fontFamily: 'Calibri,sans-serif', color: '#000000', backgroundColor: 'transparent', fontWeight: 400, fontStyle: 'normal', fontVariant: 'normal', textDecoration: 'none', verticalAlign: 'baseline', whiteSpace: 'pre-wrap'}}>TCP ir internetā plašāk lietotais transporta slāņa protokols. Programmas TCP piegādā baitu plūsmas, kas tiek sadalītas atbilstoša izmēra segmentos (kuru izmēru parasti nosaka kanāla slāņa MTU (maximum transmission unit)). Iegūtās paketes TCP tālāk piegādā IP nosūtīšanai caur tīklu. TCP pārbauda, vai paketes nav pazaudētas katrai paketei pieliekot sequence number, kuru arī lieto lai pārliecinātos, ka dati ir piegādāti sākotnējā secībā. Par sekmīgi saņemtajām paketēm, TCP sūta atpakaļ apstiprinājumus (acknowledgement). Ja sūtītājs laicīgi (kamēr nav iestājies taimauts) nesaņem apstiprinājumu, paketi uzskata par pazaudētu un nosūta vēlreiz. TCP pārbauda vai paketes dati nav bojāti, lietojot kontrolsummu.&nbsp;</span></p>
        <p dir="ltr" style={{lineHeight: '1.2', textAlign: 'justify', marginTop: '0pt', marginBottom: '0pt'}}><span style={{fontSize: '12pt', fontFamily: 'Calibri,sans-serif', color: '#000000', backgroundColor: 'transparent', fontWeight: 400, fontStyle: 'normal', fontVariant: 'normal', textDecoration: 'none', verticalAlign: 'baseline', whiteSpace: 'pre-wrap'}}>TCP nav optimizēts lietošanai bezvadu tīklos. Pieņem, ka visi pakešu zudumi (packet loss) rodas nepietiekamas datu kanāla caurlaidības dēļ. Bezvadu tīklos pakešu zudumi rodas lielākoties citu iemeslu dēļ. Tas samazina TCP ātrumu šādos apstākļos, jo pēc katras pazaudētās paketes TCP samazina sūtīšanas ātrumu. &nbsp;Lai arī TCP ir internetā visplašāk lietotais transporta slāņa protokols, ir daži pielietojumi, kur tas nav piemērots (tur lieto UDP): TCP nodrošina secīgu datu pārraidi, ja daļa datu pazūd, tos pārsūta vēlreiz un tas rada aizķeršanos. Dažiem pielietojumiem (spēles, voip) šāda aizķeršanās ir nevēlamāka kā datu zudumi.&nbsp;</span></p>
        <p dir="ltr" style={{lineHeight: '1.2', textAlign: 'justify', marginTop: '0pt', marginBottom: '0pt'}}><span style={{fontSize: '12pt', fontFamily: 'Calibri,sans-serif', color: '#000000', backgroundColor: 'transparent', fontWeight: 400, fontStyle: 'normal', fontVariant: 'normal', textDecoration: 'none', verticalAlign: 'baseline', whiteSpace: 'pre-wrap'}}>TCP ir relatīvi sarežģīts protokols, lai atvērtu savienojumu vien vajag 3 paketes (no kurām neviena nenes derīgos datus). Vēl, TCP darbināšanai vajag vairāk atmiņas nekā UDP (tam nav nozīmes datoriem, bet var būt nozīme PXE).</span></p>
    </div>
  );
}

export default Osi;
